% If the instruction has parameters (e.g. iload_0) the parameter will be on the top of the stack.
/instruction_handlers <<
    /goto { advance advance goto }

    /dup { dup }

    /newarray { advance newarray }
    /arraylength { arraylength  }
    /astore_0 { 0 astore }
    /astore_1 { 1 astore }
    /astore_2 { 2 astore }
    /astore_3 { 3 astore }
    
    /aload { advance aload }
    /aload_0 { 0 aload }
    /aload_1 { 1 aload }
    /aload_2 { 2 aload }
    /aload_3 { 3 aload }
    
    /iastore { iastore }
    /iaload { iaload }

    /areturn { areturn  }

    /if_icmplt { advance advance if_icmplt }
    /if_icmpge { advance advance if_icmpge }
    /ifeq { advance advance ifeq }
    /ifne { advance advance ifne }
    /ifge { advance advance ifge }
    /ifgt { advance advance ifgt }

    /fstore { advance store }
    /fstore_0 { 0 store }
    /fstore_1 { 1 store }
    /fstore_2 { 2 store }
    /fstore_3 { 3 store }

    /fload { advance fload }
    /fload_0 { 0 fload }
    /fload_1 { 1 fload }
    /fload_2 { 2 fload }
    /fload_3 { 3 fload }

    /fconst_0 { 0.0 }
    /fconst_1 { 1.0 }
    /fconst_2 { 2.0 }

    /fadd { fadd }
    /fsub { fsub }
    /fdiv { fdivision }
    /fmul { fmult }
    /fcmpl { fcmpl }
    /fcmpg { fcmpg }

    /istore { advance store }
    /istore_0 { 0 store }
    /istore_1 { 1 store }
    /istore_2 { 2 store }
    /istore_3 { 3 store }

    /iload { advance iload }
    /iload_0 { 0 iload }
    /iload_1 { 1 iload }
    /iload_2 { 2 iload }
    /iload_3 { 3 iload }

    /iconst_m1 { -1 }
    /iconst_0 { 0 }
    /iconst_1 { 1 }
    /iconst_2 { 2 }
    /iconst_3 { 3 }
    /iconst_4 { 4 }
    /iconst_5 { 5 }
    
    /iinc { advance advance iinc }

    /iadd { iadd }
    /isub { isub }
    /idiv { idivision }
    /imul { imult }
    /i2l { i2l }
    /ishl { ishl }
    /ishr { ishr }

    /lload { advance lload }
    /lload_0 { 0 lload }
    /lload_1 { 1 lload }
    /lload_2 { 2 lload }
    /lload_3 { 3 lload }

    /lconst_m1 { -1 }
    /lconst_0 { 0 }
    /lconst_1 { 1 }
    /lconst_2 { 2 }
    /lconst_3 { 3 }
    /lconst_4 { 4 }
    /lconst_5 { 5 }

    /lstore { advance store }
    /lstore_0 { 0 store }
    /lstore_1 { 1 store }
    /lstore_2 { 2 store }
    /lstore_3 { 3 store }

    /ladd { ladd }
    /lsub { lsub }
    /ldiv { ldivision }
    /lmul { lmult }
    /lshl { lshl }
    /lshr { lshr }
    /l2i { l2i }
    
    /ireturn { ireturn }
    /lreturn { lreturn }
    /freturn { freturn }

    /nop {}
>> def

/load_inst_handler {
    userdict /instruction_handlers get exch 2 copy known not {
        (Encountered an unknown byte code instruction. Aborting.\n) print pstack quit
    } if get
} def

/compile { % -> <code array>
    { /instructions [ } cvlit

    % Collect instruction_handlers in array on stack
    userdict /instructions get length
    /i 0 def
    {
        userdict /instructions get i get % load instruction or additional byte
        dup type (nametype) eq { load_inst_handler } if % load handler if instruction
        wrap_in_array concat
        /i i 1 add def
    } repeat

    { ] def } cvlit concat % define instructions
    { define_variables_for_parameters } cvlit concat
    { { ip instructions length lt not { exit } if next } loop } cvlit concat % loop until ip is after the last instruction
    { pstack quit } cvlit concat % we end the program after execution
} def

/wrap_in_array { % a -> [ a ]
    [ exch ]
} def

/execute { % <program_arguments...> <argument_count> ->
    compile cvx exec
} def

/concat { % array1 array2 -> array1++array2
    /additional exch def
    /base exch def
    /new base length additional length add array def % create array
    new 0 base putinterval
    new base length additional putinterval
    new
} def