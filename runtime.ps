/ip 0 def

/variables << >> def

/define_variables_for_parameters { % <input parameter> <parameter_count> ->
    % variables are numbered from <parameter_count> -1 -> 0
    dup 1 sub /pc_m1 exch def
    /i 0 def
    {
        userdict /variables get exch
        pc_m1 i sub
        exch put
        
        /i i 1 add def
    } repeat
} def

/advance { % -> <element at ip>
    instructions ip get 
    /ip ip 1 add def 
} def

/next { % -> the semantics of the next instruction will be applied
    advance exec 
} def

/convert_i32_i64 { % <a 64-bit> -> <a 32-bit>
    check_int
    dup 4294967295 and exch
    0 lt { -1 * } if
} def

/convert_i64_i32 { % <a 32-bit> -> <a 64-bit>
    check_int
    dup 4294967295 and exch
    0 lt { -1 * } if
} def

% Please ensure alphabetical order

/check_int { % ->
    dup type (integertype) eq not { (Type is no integer. Aborting.) print quit } if
} def

/goto { % branchbyte1, branchbyte2 ->
    exch 8 bitshift or /ip exch def
} def

/iadd { % value1, value2 -> result
    check_int exch check_int  % no exch at end because not needed due to commutativity
    add
} def

/isub { % value1, value2 -> result
    check_int exch check_int exch
    sub
} def

/idivision { % value1, value2 -> result
    check_int exch check_int exch
    idiv
} def

/imult { % value1, value2 -> result
    check_int exch check_int  % no exch at end because not needed due to commutativity
    mul
} def

/ishl { % value1, value2 -> result
    check_int exch check_int exch
    31 and % See https://docs.oracle.com/javase/specs/jvms/se7/html/jvms-6.html#jvms-6.5.ishl
    {
        2 mul
    } repeat
} def

/ishr { % value1, value2 -> result
    check_int exch check_int exch
    {
        2 idiv
    } repeat
} def

/istore { % value, index ->
    variables exch
    3 -1 roll
    put
} def

/if_icmplt { % value1, value2, branchbyte1, branchbyte2 ->
    4 2 roll lt { goto } { pop pop } ifelse
} def

/if_icmpge { % value1, value2, branchbyte1, branchbyte2 ->
    4 2 roll ge { goto } { pop pop } ifelse
} def

/ifeq { % value, branchbyte1, branchbyte2 ->
    3 2 roll 0 eq { goto } { pop pop } ifelse
} def

/iload { % var_index â†’ var_value
    userdict /variables get exch get check_int
} def

/ireturn { % ->
    check_int return
} def

/lreturn { % ->
    check_int return
} def

/return { % ->
    /ip instructions length def
} def