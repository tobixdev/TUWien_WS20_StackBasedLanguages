/ip 0 def

/variables << >> def

/define_variables_for_parameters { % <input parameter> <parameter_count> ->
    % variables are numbered from <parameter_count> -1 -> 0
    dup 1 sub /pc_m1 exch def
    /i 0 def
    {
        userdict /variables get exch
        pc_m1 i sub
        exch put
        
        /i i 1 add def
    } repeat
} def

/advance { % -> <element at ip>
    instructions ip get 
    /ip ip 1 add def 
} def

/next { % -> the semantics of the next instruction will be applied
    advance exec 
} def

/c_0000000080000000 2147483648 def
/c_ffffffff00000000 -4294967296 def
/c_00000000ffffffff 4294967295 def

/convert_i32_i64 { % <a in 32-bit> -> <a in 64-bit>
    check_int
    c_00000000ffffffff and
    dup c_0000000080000000 and 0 eq not % is negative
    { c_ffffffff00000000 or }
    if
} def

/convert_i64_i32 { % <a in 64-bit> -> <a in 32-bit>
    check_int
    dup 0 lt % is negative
    { c_0000000080000000 or } 
    if
    c_00000000ffffffff and
} def

/overflow_i32 {
    check_int
    c_00000000ffffffff and
    convert_i32_i64
} def

/check_int { % ->
    dup type (integertype) eq not { (Type is no integer. Aborting.) print quit } if
} def

/check_float { % ->
    dup type (realtype) eq not { (Type is no real. Aborting.) print quit } if
} def

/check_array { % ->
    dup type (arraytype) eq not { (Type is no array. Aborting.) print quit } if
} def

% Please ensure alphabetical order

/arraylength { % array -> length
  check_array length
} def

/astore { % value, index ->
    exch check_array exch store
} def

/aload { % var_index → var_value
    userdict /variables get exch get check_array
} def

/areturn { % ->
    check_array return
} def

/supported_types_zero_element <<
    10 0
    11 0
    6 0.0
>> def

/newarray { % count, type -> array
    % /name_zero exch 10 eq { 0 } { (unknown type) print quit } ifelse def
    //supported_types_zero_element exch 2 copy known not {
        (Unknown array type. Aborting.\n) print pstack quit
    } if get

    /zero_element exch def
    /count exch def
    [
        count
        {
            zero_element
        } repeat
    ]
} def

/fload { % var_index → var_value
    userdict /variables get exch get check_float
} def

/fcmpl { % value1, value2 -> result
    2 copy gt { pop pop 1 } { eq { 0 } { -1 } ifelse } ifelse
} def

/fcmpg { % value1, value2 -> result
    fcmpl % We currently do not consider NaN
} def

/fadd { % value1, value2 -> result
    check_float exch check_float  % no exch at end because not needed due to commutativity
    add
} def

/fsub { % value1, value2 -> result
    check_float exch check_float exch
    sub
} def

/fdivision { % value1, value2 -> result
    check_float exch check_float exch
    div
} def

/fmult { % value1, value2 -> result
    check_float exch check_float  % no exch at end because not needed due to commutativity
    mul
} def

/freturn { % ->
    check_float return
} def

/goto { % branchbyte1, branchbyte2 ->
    exch 8 bitshift or /ip exch def
} def

/i2l { 
    % Already in 64 bit representation
} def

/iadd { % value1, value2 -> result
    ladd overflow_i32
} def

/iaload { % array, index -> value
    check_int get check_int
} def

/iastore { % array, index, value ->
    check_int put
} def

/isub { % value1, value2 -> result
    lsub overflow_i32
} def

/iinc { % index, value ->
    /index exch def
    /value exch def
    index iload
    value iadd
    index store
} def

/idivision { % value1, value2 -> result
    ldivision overflow_i32
} def

/imult { % value1, value2 -> result
    lmult overflow_i32
} def

/ishl { % value1, value2 -> result
    check_int exch check_int exch
    31 and % See https://docs.oracle.com/javase/specs/jvms/se7/html/jvms-6.html#jvms-6.5.ishl
    {
        2 imult
    } repeat
} def

/ishr { % value1, value2 -> result
    check_int exch check_int exch
    {
        2 idivision
    } repeat
} def

/store { % value, index ->
    userdict /variables get exch
    3 -1 roll
    put
} def

/if_icmplt { % value1, value2, branchbyte1, branchbyte2 ->
    4 2 roll lt { goto } { pop pop } ifelse
} def

/if_icmpge { % value1, value2, branchbyte1, branchbyte2 ->
    4 2 roll ge { goto } { pop pop } ifelse
} def

/ifeq { % value, branchbyte1, branchbyte2 ->
    3 2 roll 0 eq { goto } { pop pop } ifelse
} def

/ifne { % value, branchbyte1, branchbyte2 ->
    3 2 roll 0 eq not { goto } { pop pop } ifelse
} def

/ifgt { % value, branchbyte1, branchbyte2 ->
    3 2 roll 0 gt { goto } { pop pop } ifelse
} def

/ifge { % value, branchbyte1, branchbyte2 ->
    3 2 roll 0 ge { goto } { pop pop } ifelse
} def

/iload { % var_index → var_value
    userdict /variables get exch get check_int
} def

/ireturn { % ->
    check_int return
} def

/i2l { 
    % Already in 64 bit representation
} def

/ladd { % value1, value2 -> result
    check_int exch check_int  % no exch at end because not needed due to commutativity
    add
} def

/lsub { % value1, value2 -> result
    check_int exch check_int exch
    sub
} def

/ldivision { % value1, value2 -> result
    check_int exch check_int exch
    idiv
} def

/lmult { % value1, value2 -> result
    check_int exch check_int  % no exch at end because not needed due to commutativity
    mul
} def

/lshl { % value1, value2 -> result
    check_int exch check_int exch
    31 and % See https://docs.oracle.com/javase/specs/jvms/se7/html/jvms-6.html#jvms-6.5.ishl
    {
        2 lmult
    } repeat
} def

/lshr { % value1, value2 -> result
    check_int exch check_int exch
    {
        2 ldivision
    } repeat
} def

/l2i {
    convert_i64_i32 convert_i32_i64
} def

/lload { % var_index → var_value
    userdict /variables get exch get check_int
} def

/lreturn { % ->
    check_int return
} def

/return { % ->
    /ip instructions length def
} def